{"version":3,"sources":["components/Inputs/RadioButton.js","components/TemperatureFormatOption.js","components/SearchForm.js","components/WindDirectionIcon.js","components/ResultComponent.js","App.js","index.js"],"names":["RadioButton","unit","selectedUnit","radioChange","translateUnit","type","name","className","id","value","toLowerCase","checked","onChange","htmlFor","TemperatureFormatOption","metric","imperial","SearchForm","changeInput","fetchData","placeholder","aria-label","onClick","WindDirectionIcon","deg","style","transform","width","height","viewBox","fill","xmlns","fillRule","d","ResultComponent","data","unitOfSpeed","unitOfTemp","main","temp","feels_like","weather","description","coord","lat","lon","wind","speed","API_KEY","process","REACT_APP_API_KEY","App","useState","city","setCity","setselectedUnit","undefined","tempMetric","setTempMetric","tempImperial","setTempImperial","fetch","a","Axios","get","response","e","preventDefault","trim","length","Promise","all","result","console","log","message","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.528595f3.chunk.js","sourcesContent":["import React from 'react';\n\nfunction RadioButton({unit, selectedUnit, radioChange, type}) {\n  const translateUnit = unit === 'metric' ? 'Celsius' : 'Fahrenheit'\n  const name = `radio${translateUnit}`\n  return (\n    <div>\n      <input\n\t\t\t\tclassName='form-check-input'\n\t\t\t\ttype='radio'\n\t\t\t\tname={name}\n\t\t\t\tid={name}\n\t\t\t\tvalue={translateUnit.toLowerCase()}\n\t\t\t\tchecked={selectedUnit === unit}\n        onChange={radioChange}\n      />\n\t\t\t<label className='form-check-label mr-3' htmlFor={name}>{translateUnit}</label>\n    </div>\n  );\n}\n\nexport default RadioButton;","import React from 'react';\nimport RadioButton from './Inputs/RadioButton';\n\nfunction TemperatureFormatOption({ radioChange, selectedUnit, metric, imperial }) {\n  return (\n    <div id=\"temperature-format-option-component\" className=\"d-flex flex-column flex-md-row\">\n      \t<p className='m-0 mr-3'>Display temperature in: </p>\n\t\t\t\t<div className='form-check form-check-inline'>\n        <RadioButton unit={metric} selectedUnit={selectedUnit} radioChange={radioChange} />\n        <RadioButton unit={imperial} selectedUnit={selectedUnit} radioChange={radioChange} />\n\t\t\t\t</div>\n    </div>\n  );\n}\n\nexport default TemperatureFormatOption;","import React from 'react';\n\nfunction SearchForm({ changeInput, fetchData }) {\n  return (\n    <form id=\"search-form-component\" className='form-inline my-3'>\n      <input\n        className='form-control-lg mr-2 input-search'\n        type='search'\n        placeholder='Search'\n        aria-label='Search'\n        onChange={changeInput}\n      />\n      <button className='btn btn-lg btn-success my-2 my-0' type='submit' onClick={fetchData}>\n        Search\n      </button>\n    </form>\n  );\n}\n\nexport default SearchForm;","import React from 'react';\n\nfunction WindDirectionIcon({ deg }) {\n  return (\n    <svg\n\t\t\tstyle={{ transform: `rotate(${deg}deg)` }}\n\t\t\twidth='1em'\n\t\t\theight='1em'\n\t\t\tviewBox='0 0 16 16'\n\t\t\tclassName='bi bi-arrow-up'\n\t\t\tfill='currentColor'\n\t\t\txmlns='http://www.w3.org/2000/svg'>\n\t\t\t<path\n\t\t\t\tfillRule='evenodd'\n\t\t\t\td='M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z'\n\t\t\t/>\n\t\t</svg>\n            \n  );\n}\n\nexport default WindDirectionIcon;","import React from 'react';\nimport WindDirectionIcon from './WindDirectionIcon';\n\nfunction ResultComponent({ data, selectedUnit }) {\n  const cUnicode = `\\u2103`\n\tconst fUnicode = `\\u2109`\n\n  const unitOfSpeed = selectedUnit === 'metric' ? 'm/s' : 'mph'\n  const unitOfTemp = selectedUnit === 'metric' ? cUnicode : fUnicode\n\n  const { name } = data\n  const { temp, feels_like } = data.main\n  const { main, description } = data.weather[0]\n  const { lat, lon } = data.coord\n  const { speed, deg } = data.wind\n\n  return (\n    <div id=\"result-component\">\n\t\t\t<h2>{name}</h2>\n      <h2 id=\"temperature\"> {temp} <span id=\"unicodeTag\">{unitOfTemp}</span> </h2>\n      <h3>(Feels like: {feels_like}{unitOfTemp})</h3>\n\t\t\t<p>{main}, {description}</p>\n\t\t\t<p>Lat: {lat} Lng: {lon}</p>\n      <p><span><WindDirectionIcon deg={deg}/></span>{speed} {unitOfSpeed}</p>\n\t\t</div>\n  );\n}\n\nexport default ResultComponent;","import React, { useState } from 'react'\nimport Axios from 'axios'\nimport TemperatureFormatOption from './components/TemperatureFormatOption'\nimport SearchForm from './components/SearchForm'\nimport ResultComponent from './components/ResultComponent'\n\nconst API_KEY = process.env.REACT_APP_API_KEY\n\nfunction App() {\n  const metric = 'metric'\n  const imperial = 'imperial'\n\n\tconst [city, setCity] = useState('')\n\tconst [selectedUnit, setselectedUnit] = useState(metric)\n  const [tempMetric, setTempMetric] = useState(undefined)\n  const [tempImperial, setTempImperial] = useState(undefined)\n\n\tconst changeInput = (e) => setCity(e.target.value)\n\tconst radioChange = (e) => setselectedUnit(e.target.value === 'celsius' ? metric : imperial)\n\n  async function fetch(unit) {\n    const response = await Axios.get(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=${unit}&appid=${API_KEY}`\n    )\n    return response\n  }\n\n  const fetchData = async(e) => {\n    e.preventDefault()\n    \n    // simple input error handling\n    if(city === undefined || city == null || city.trim().length < 1) return\n\n    try {\n      const result = await Promise.all([fetch(metric), fetch(imperial)])\n\n      setTempMetric(result[0].data)\n      setTempImperial(result[1].data)\n    } catch (error) {\n      console.log('Error! Could not fetch.', error.message)\n    }\n  }\n\n\treturn (\n\t\t<div className='background_container'>\n\t\t\t<div className=\"container\">\n        <div className=\"section-search\">\n          <SearchForm changeInput={changeInput} fetchData={fetchData} />\n          <TemperatureFormatOption metric={metric} imperial={imperial} radioChange={radioChange} selectedUnit={selectedUnit} />\n        </div>\n        <div className=\"section-result\">\n        {tempMetric !== undefined && tempImperial !== undefined && (\n          <ResultComponent data={selectedUnit === metric ? tempMetric : tempImperial} selectedUnit={selectedUnit} />\n        )}\n        </div>\n      </div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './style/main.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}